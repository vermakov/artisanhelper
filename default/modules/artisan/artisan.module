<?php

define('ARTISAN_LIST_PER_PAGE',5);

/**
 * Implements hook_block_info().
 */
function artisan_block_info(){
  $blocks = array();

  // The array key defines the $delta parameter used in all
  // other block hooks.
  $blocks['list_artisans'] = array(
    // The name of the block on the blocks administration page.
    'info' => t('List of Artisans'),
  );

  return $blocks; 
}


/**
 * Returns a list of artisans.
 *
 * @param $number
 *   The number of artisans to return.
 * @return
 *   A result set object containing the list of artisans.
 */
function artisan_list_artisans($number) {
  // Use the Database API to retrieve our data.
  $query = db_select('artisan_profiles', 'artisans')
    ->fields('artisans', array('artisan_id', 'first_name', 'last_name', 'description','video_link','created','changed', 'album_id'))
    ->orderBy('created', 'DESC')
    ->range(0, $number)
    ->execute();

  return $query;
}

function artisan_get_similar_artisans($artisan_id,$number) {
  // Use the Database API to retrieve our data.
  $query = db_select('artisan_profiles', 'artisans')
    ->fields('artisans', array('artisan_id', 'first_name', 'last_name', 'description','video_link','created','changed', 'album_id'))
	->condition('artisan_id',$artisan_id,'<>')
    ->orderBy('created', 'DESC')
    ->range(0, $number)
    ->execute();

  return $query;
}

function artisan_get_by_id($id) {
 // Use the Database API to retrieve our data.
  $query = db_select('artisan_profiles', 'artisans')
    ->fields('artisans', array('artisan_id', 'first_name', 'last_name'))
    ->condition('artisan_id',$id)
    ->execute();
  
  if(count($query) > 0) {
    foreach($query as $single_artisan) {
		return $single_artisan;
	}
  } else {
    return NULL;
  }
}

function artisan_get_full_list() {
  $artisans = array();
  
  // Use the Database API to retrieve our data.
  $query = db_select('artisan_profiles', 'artisans')
    ->fields('artisans', array('artisan_id', 'first_name', 'last_name'))
    ->orderBy('first_name')
    ->execute();
  
  foreach($query as $single_artisan) {
    $artisans[$single_artisan->artisan_id] = $single_artisan->first_name . ' ' . $single_artisan->last_name;
  }
  
  return $artisans;
}

/**
 *  Implements hook_theme().
 */
function artisan_theme($existing, $type, $theme, $path) { 
  return array(
  	'artisan_list_profile' => array(
  	  'variables' => array(
  	    'node' => NULL,
        'file_info' => NULL,
      ), 
      'template' => 'artisan-list-profile', 
    ),
    'item_list__artisan' => array(
      'render element' => 'items',
    ), 
	'artisan_teaser' => array(
      'variables' => array('name', 'artisan_id', 'image_uri','short_description'),
      'template' => 'artisan-teaser',
    ),
	'profile_info_area' => array(
	  'variables' => array('artisan','name', 'artisan_id','description','video_link'),
	  'template' => 'profile-info-area',
	),
	'profile_image_area' => array(
	  'variables' => array('artisan','images'),
	  'template' => 'profile-image-area',
	),
	'profile_video_area' => array(
	  'variables' => array('artisan','youtube_id'),
	  'template' => 'profile-video-area',
	),
	'artisan_items_area' => array(
	  'variables' => array('artisan','items'),
	  'template' => 'artisan-items-area',
	),
	'profile_similar_artisans' => array(
	  'variables' => array('artisan','artisan_id','simiar_artisans'),
	  'template' => 'profile-similar-artisans',
	),
  );
}

/**
 * Implements hook_library().
 */
function artisan_library() {
  $path = drupal_get_path('module','artisan');
  
  $libraries = array();
  
  $libraries['profile_gallery'] = array(
    'title' => 'Profile Image Gallery',
	'website' => 'http://coffeescripter.com/code/ad-gallery/',
	'version' => '1.2.4',
	'js' => array(
	  $path . '/jquery.ad-gallery.js' => array(),
	),
	'css' => array(
	  $path . '/profile_gallery.css' => array(),
	),
  );
  $libraries['profile_pickachoose_gallery'] = array(
    'title' => 'Pickachoose Gallery',
	'website' => '',
	'version' => '1',
	'js' => array(
	  $path . '/jquery.pikachoose.full.js' => array(),
	),
	'css' => array(
	  $path . '/bottom.css' => array(),
	),
  );
  
  return $libraries;
}


/**
 * Preprocesses artisan profile variables.
 */
function template_preprocess_artisan_list_profile(&$variables) {
  $node = $variables['node'];
  
  $variables['title'] = array(
    '#type' => 'link',
    '#title' => $node->first_name . ' ' . $node->last_name,
    '#href' => 'artisan/' . $node->artisan_id,
  );
  
  $variables['image_uri'] = '';
  
  if($variables['file_info']){
    $variables['image_uri'] = $variables['file_info']->uri;
  }
  
  $variables['created'] = $node->created;
  $variables['date'] = format_date($node->created,'custom','F d, Y');
  $variables['description'] = $node->description;
  $variables['album_id'] = $node->album_id;
}

/**
 * Implements hook_block_view().
 */
function artisan_block_view($delta = '') {
  // Create an empty block.
  $block = array(
    'subject' => '',
    'content' => '',
  );
  
  if($delta == 'list_artisans') {
    // Set block title
    $block['subject'] = 'List of Artisans';

    // Check if the user can access content.
    if(user_access('access content')){
      // Retrieve the recently added artisans
      $results = artisan_list_artisans(ARTISAN_LIST_PER_PAGE);
	  
	  // Create links for each artisan
      $items = array();
      
      foreach($results as $single_artisan)
      {
		// Load image file link
        $items[] = array(
          'data' => array( 
            '#theme' => 'artisan_list_profile',
            '#node' => $single_artisan,
            '#file_info' => file_load($single_artisan->album_id),
          ),
          'class' => array('artisan-'.$single_artisan->artisan_id),
        );
      }
      if(!empty($items)) {
        // Theme the list of artisans
        $block['content']['list'] = array(
          '#theme' => 'item_list__artisan',
          '#items' =>  $items,
          '#pre_render' => array('artisan_list_profile_child_render'),
        );
        $block['content']['more'] = array(
          '#theme' => 'more_link',
          '#url' => 'blog',
          '#title' => t('Read the latest blog entries.'),
        );
        $block['content']['#attached']['css'][] = drupal_get_path('module','single_blog') . '/single-blog-post.css';
      }
    }
  }
  return $block;
}

function theme_item_list__artisan(&$variables)
{
  $items = $variables['items']['#items'];
  $nItems = count($items);
  
  $output = '';
  $currentItem = 0;
  
  if($nItems > 0) {
    $output .= "<table class='artisan-item-slider'>";
    for($row = 0;$row < 2;$row++) {
      $output .= "<tr class='artisan-item-row-" . $row . "'>";
      for($column = 0;$column < 3;$column++) {
        $output .= "<td class='artisan-item-cell-" . $column . "'>" . $items[$currentItem]['data'] . "</td>";
        $currentItem++;
        // Check if we have any more items, if not we are done.
        if($currentItem >= $nItems) {
          break;
        }
      }
      $output .= "</tr>";
      
      // Check if we have any more items, if not we are done.
      if($currentItem >= $nItems) {
        break;
      }
    }
    $output .= "</table>";
  }
  
  return $output;
}

/**
 * Render the child elements of theme_item_list() before its * data is themed.
 */
function artisan_list_profile_child_render($elements) {
  foreach (array_keys($elements['#items']) AS $key) { 
    // Take the renderable array that we set in 
    // single_blog_block_view() and render it into the string 
    // that theme_item_list() expects. 
    if (is_array($elements['#items'][$key]['data'])) { 
      $elements['#items'][$key]['data'] = drupal_render($elements['#items'][$key]['data']); 
    } 
  }
  return $elements;
}

/**
 * Implements hook_entity_info().
 */
function artisan_entity_info() {
  $return['artisan'] = array(
    'label' => t('Artisan Profile'),
	'controller class' => 'ArtisanEntityController',
	'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'artisan_profiles',
    'uri callback' => 'artisan_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'artisan_id',
      'label callback' => 'artisan_full_name',
     ),
    'static cache' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => FALSE,
      ),
    ),
  );
  
  $return['artisan']['bundles']['artisan'] = array( 
	'label' => 'Artisan Profile', 
	'admin' => array( 
	  'path' => 'admin/structure/artisans', 
	  'real path' => 'admin/structure/artisans', 
	  'access arguments' => array('administer artisans'),
	), 
  ); 
  
  return $return;
}

/**
 * Entity uri callback.
 */
function artisan_uri($artisan) {
  return array(
    'path' => 'artisan/' . $artisan->artisan_id,
  );
}

/**
 * Entity instance label callback.
 */
function artisan_full_name($artisan) {
	return array(
		'label' => $artisan->first_name.' '.$artisan->last_name,
	);
}

/**
 * Implements hook_menu().
 */
function artisan_menu() {
  $items['admin/structure/artisans'] = array(
    'title' => 'Artisan Profile Manager',
    'description' => 'Manage artisans.',
    'page callback' => 'artisan_admin_info_page',
	'access arguments' => array('administer artisans'),
    'file' => 'artisan.admin.inc',
  );
  
  $items['admin/structure/artisans/view'] = array(
    'title' => 'View',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['artisan/add'] = array(
    'title' => 'Add new artisan',
    'page callback' => 'artisan_add',
    'access arguments' => array('create artisans'),
    'weight' => 1,
    'menu_name' => 'management',
    'file' => 'artisan.pages.inc',
  );
  
  $items['artisan/%artisan'] = array(
    'title callback' => 'artisan_page_title',
    'title arguments' => array(1),
    'page callback' => 'artisan_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view artisans'),
    'type' => MENU_CALLBACK,
    'file' => 'artisan.pages.inc',
  );
  
  $items['artisan/%artisan/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['artisan/%artisan/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'artisan_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('update artisans'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'artisan.pages.inc',
  );
  
  $items['artisan/%artisan/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('artisan_delete_confirm', 1),
    'access arguments' => array('delete artisans'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'artisan.pages.inc',
  );
  
  $items['artisan/recent'] = array(
    'title' => 'Recently added artisans',
    'page callback' => 'artisan_page_list_recent',
    'access arguments' => array('view artisans'),
    'file' => 'artisan.pages.inc',
  );
  
  return $items;
}

/**
 * Sets the page title based on the specified artisan.
 *
 * @param $artisan
 *   The artisan object.
 */
function artisan_page_title($artisan) {
  return $artisan->first_name.' '.$artisan->last_name;
}

/**
 * Load artisan entities from the database.
 *
 * This function should be used whenever you need to load more than one artisan
 * from the database. artisans are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see entity_load()
 *
 * @param $aids
 *   An array of artisan IDs.
 * @param $conditions
 *   An array of conditions on the {artisan} table in the form 'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return
 *   An array of node objects indexed by nid.
 */
function artisan_load_multiple($aids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('artisan', $aids, $conditions, $reset);
}


/**
 * Implements hook_permission().
 */
function artisan_permission() {
  return array(
    'administer artisans' =>  array(
      'title' => t('Administer artisans'),
    ),
    'create artisans' =>  array(
      'title' => t('Create artisans'),
    ),
    'update artisans' =>  array(
      'title' => t('Update artisans'),
    ),
    'view artisans' =>  array(
      'title' => t('View artisans'),
    ),
    'delete artisans' =>  array(
      'title' => t('Delete artisans'),
    ),
  );
}

/**
 * Load an artisan object from the database.
 *
 * @param $aid
 *   The artisan ID.
 * @param $vid
 *   The revision ID.
 * @param $reset
 *   Whether to reset the artisan_load_multiple cache.
 *
 * @return
 *   A fully-populated node object.
 */
function artisan_load($aid = NULL, $vid = NULL, $reset = FALSE) {
  $aids = (isset($aid) ? array($aid) : array());
  $conditions = null;
  $artisan = artisan_load_multiple($aids, $conditions, $reset);
  return $artisan ? reset($artisan) : FALSE;
}

/**
 * Save an artisan.
 *
 * @param $artisan
 *   The artisan to be saved.
 * @return
 *   The saved artisan, now with an aid if necessary.
 */
function artisan_save($artisan) {
  return entity_get_controller('artisan')->save($artisan);
}

/**
 * Returns an initialized artisan object.
 *
 * @param $type
 *   The machine-readable type of the artisan.
 *
 * @return
 *   An artisan object with all default fields initialized.
 */
function artisan_new($type = '') {
  return entity_get_controller('artisan')->create($type);
}


/**
 * Deletes an artisan by ID.
 *
 * @param $aid
 *   The ID of the product to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function artisan_delete($aid) {
  return artisan_delete_multiple(array($aid));
}

/**
 * Deletes multiple artisans by ID.
 *
 * @param $aids
 *   An array of artisan IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function artisan_delete_multiple($aids) {
  return entity_get_controller('artisan')->delete($aids);
}
